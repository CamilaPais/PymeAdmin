Notas
-----

Entradas/Inflow
			InflowItem
			Peso:float
			Pago (efvo/tarjeta)

Salidas/Outflow
			Compras a proveedor
			Pago de deuda
			Fiado
			Estado de cuenta x proveedor

Product
	name:string
	price:float
	promotion_price:float


Notificaciones
				Pedidos
				Bajo stock x proveedor (genera lista de compras)
				Desactivables

Estadísticas
			  Caja
			  Balance
			  Venta por item (en kg y en $)

Temas a hablar con Sandra:

Tasks:
DONE |	Associations
		associating Inflow and Product IDs to PI model

rails generate migration AddReferenceIdsToInflowItem

class AddReferenceIdsToInflowItem < ActiveRecord::Migration
  def change
  	add_reference :inflow_items, :product
  	add_reference :inflow_items, :inflow
  end
end

DONE |	Add new Product attributes
		delete product attribute "quantity"
		add float:"promotion_price"
		add string:"quantity_type"  kgs - u

rails generate migration RemoveQuantityFromProducts quantity:float

class RemoveQuantityfromProducts < ActiveRecord::Migration[5.0]
  def up
    remove_column :products, :quantity
  end

  def down
    add_column :products, :quantity, :float
  end
 end

rails generate migration AddAttributesToProducts unit:string promotion_price:float

class AddAttributesToProducts < ActiveRecord::Migration
  def change
    add_column :products, :unit, :string
    add_column :products, :promotion_price, :float
  end
end

DONE |	Generate Supplier model (has_many :outflows)
DONE |	Scaffold Outflow (belongs_to :supplier)

rails generate migration AddReferenceIdsToOutflow

class AddReferenceIdsToOutflow < ActiveRecord::Migration[5.0]
  def change
  	add_reference :outflow, :supplier
  end
end

DONE |	Agregar cash boolean a Inflow

rails generate migration AddCashToInflows cash:boolean

class AddAttributesToProducts < ActiveRecord::Migration
  def change
    add_column :inflows, :cash, :boolean
  end
end


DONE |	Validations:
			Inflow: 	total > 0, cash boolean,
			Outflow: 	amount > 0, cash boolean, supplier
			InflowItem: Quantity > 0, product ID, inflow ID
			Product: 	name, price > 0, promotion_price > 0,
			Supplier: 	name

DONE |	Create an OutflowItem model, associated with Outflow and Product.

rails generate model OutflowItem quantity:float outflow:references product:references

DONE |	Add stock column in Product model

rails generate migration AddStockToProduct stock:float

add_column :products, :stock, :float

DONE |	Create nav bar with logo
TO DO|	Nested forms
		Outflow items: product??? que pasa cuando van a comprar yerba??
		MVC Notifications
			Model 										| DONE
			Migration: create_table		| DONE
			Controller 								| DONE
			Route											| DONE
			View folder and files			| DONE
		Controller: Pages
			take
			statistics
				gross sales by item (kg/$)
				rush hour
				cost of goods sold (costos)
				gross margin
				net profit
				total cashflow
			balances (y - s - m - w)
		Producto + quantity => inflow
		Creación de Inflow con respectivos II y Outflow con OI
			Select con autocomplete, javascript
		Limitar index a últimas n entradas para evitar carga lenta, dar opción a cargar de a n cantidad por vez
			index method within controller, Project.all  -x-> custom query
		Actualización de VISTAS Supplier account_balance en creación de Outflow entry
		i18n
		remove sprockets
		limpiar routes


@outflow.save
	@outflow.supplier
		balance = @supplier.balance + @outflow.amount
		@supplier.update_attribute(:balance => balance)
end

Probably going to need this vocabulary:
cash
credit
cashflow		inflow
				outflow
statistics
debt
expenses
income
take (caja del día)
petty cash (caja chica)
deficit
discount
sale price
due date
rent
services
tax
expenditure
forecasting / projection
gross income
gross margin
gross sales
net sales
product half-life
inventory / stock
merchandise
salary
margin of profit
net income
net proceeds
net sales
net worth
premium
vendor
supplier
wage


YAML translation file


STACK OVERFLOW : HOW TO DRY OUT THE FILE ("elegant solution")
			dictionary:
			  email: &email Email
			  name: &name Name
			  password: &password Password
			  confirmation: &confirmation Confirmation

			activerecord:
			  attributes:
			    user:
			      email: *email
			      name: *name
			      password: *password
			      password_confirmation: *confirmation
			  models:
			    user: User
			users:
			  fields:
			    email: *email
			    name: *name
			    password: *password
			    confirmation: *confirmation
			sessions:
			  new:
			    email: *email
			    password: *password


Use "lazy" lookup for the texts used in views. Let’s say we have the following structure:
			en:
			  users:
			    show:
			      title: 'User details page'
			The value for users.show.title can be looked up in the template app/views/users/show.html.haml like this:

			= t '.title'

Any translation that should be kept throughout the site should be namespaced to app. For example, if we wanted to translate "Codealia", we would need to do something like the following:
			en:
			  app:
			    codealia: "Codealia"

Translation Categories
			In addition to namespacing, to avoid conflicts within views, we introduce a couple of categories to organize translations in:

			headings - Translations related to headings in the document
			labels - Translations which are used to identify parts of the document. e.g. form labels, table headers, etc.
			flash - For flash messages
			links - Translations related to followable links


